<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.human.camping.dao.Admin_CompanyRoomDAO">
	
	<!-- 업체 방 전체 수 구하기 -->
	<select id="selectCompanyRoomCount" resultType="int">
		select count(*) from company_room cr left outer join company c on cr.idx=c.idx
	</select>
	
	<!-- 업체 방 1개 가져오기 -->
	<select id="selectByRoomIdx" parameterType="int" resultType="RoomVO">
		select * from company_room where roomidx=#{roomidx}
	</select>

	<!-- 업체 방 1페이지 구하기 -->
	<select id="selectRoomList" parameterType="hashmap" resultType="RoomVO">
		select 
 			*
 		from
	 		(select 
	 			rownum rnum, R.*
	 		from
	 			(select * from company_room cr left outer join company c on cr.idx=c.idx order by roomidx desc) R
	 		where
	 			<![CDATA[
	 				rownum <= #{endNo}
	 			]]>
			) Q
		where
 			<![CDATA[
 			rnum >= #{startNo}
 			]]>
	</select>
	
	<!-- 방 저장하기 -->
	<insert id="insert" parameterType="RoomVO">
		insert into company_room
			(roomidx, idx, roomname, minpeople, maxpeople, price, r_check, content)
		values
			(company_room_roomidx_seq.nextval, #{idx}, #{roomname}, #{minpeople}, #{maxpeople}, #{price}, #{r_check}, #{content})
	</insert>

	<!-- 방 수정하기 -->
	<update id="update" parameterType="RoomVO">
		update company_room set roomname=#{roomname}, minpeople=#{minpeople}, maxpeople=#{maxpeople}, price=#{price}, r_check=#{r_check}, content=#{content} where roomidx=#{roomidx}
	</update>

	<!-- 방 삭제하기 -->
	<delete id="delete" parameterType="int">
		delete from company_room where roomidx=#{roomidx}
	</delete>
</mapper>